@page "/expense/new"
@using ExpenseSplit.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Models.DTOs
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavManager
@inject ICurrentUserService CurrentUserService
@attribute [Authorize]

<PageTitle>New Expense</PageTitle>

<h3><span class="oi oi-plus me-2"></span>Create New Expense</h3>

<EditForm Model="@expenseModel" OnValidSubmit="HandleCreateExpense">
    <DataAnnotationsValidator />

    <div class="card shadow-sm">
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputText @bind-Value="expenseModel.Description" class="form-control" />
                <ValidationMessage For="() => expenseModel.Description" />
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Total Amount</label>
                    <InputNumber @bind-Value="expenseModel.TotalAmount" class="form-control" />
                    <ValidationMessage For="() => expenseModel.TotalAmount" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Date</label>
                    <InputDate @bind-Value="expenseModel.Date" class="form-control" />
                    <ValidationMessage For="() => expenseModel.Date" />
                </div>
            </div>

            <hr />

            <h5 class="mt-4">Participants</h5>
            @if (friends == null)
            {
                <p>Loading friends...</p>
            }
            else
            {
                <div class="list-group mb-3">
                    @foreach (var p in expenseModel.Participants)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            @GetFriendName(p.UserId)
                            <button type="button" class="btn btn-sm btn-outline-danger oi oi-trash" @onclick="() => RemoveParticipant(p)">X</button>
                        </div>
                    }
                </div>

                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Add Participant
                    </button>
                    <ul class="dropdown-menu">
                        @if (_currentUserProfile != null && !expenseModel.Participants.Any(p => p.UserId == _currentUserId))
                        {
                            <li>
                                <a class="dropdown-item" href="#" @onclick="() => AddParticipant(_currentUserId)" @onclick:preventDefault>
                                    @_currentUserProfile.FirstName (self)
                                </a>
                            </li>
                        }
                        @foreach (var friend in friends.Where(f => !expenseModel.Participants.Any(p => p.UserId == f.Id)))
                        {
                            <li>
                                <a class="dropdown-item" href="#" @onclick="() => AddParticipant(friend.Id)" @onclick:preventDefault>
                                    @friend.FirstName @friend.LastName
                                </a>
                            </li>
                        }
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="friends">Manage Friends</a></li>
                    </ul>
                </div>
            }

            <h5 class="mt-4">Split Method</h5>
            <InputSelect @bind-Value="expenseModel.SplitType" class="form-select">
                <option value="@SplitMethod.Equal">Split Equally</option>
                <option value="@SplitMethod.Exact">By Exact Amount</option>
                <option value="@SplitMethod.Percentage">By Percentage</option>
            </InputSelect>

            @if (expenseModel.SplitType == SplitMethod.Exact)
            {
                <div class="mt-3">
                    @foreach (var p in expenseModel.Participants)
                    {
                        <div class="input-group mb-2">
                            <span class="input-group-text" style="width: 150px;">@GetFriendName(p.UserId)</span>
                            <span class="input-group-text">$</span>
                            <InputNumber @bind-Value="p.Amount" class="form-control" placeholder="0.00" />
                        </div>
                    }
                </div>
            }
            @if (expenseModel.SplitType == SplitMethod.Percentage)
            {
                <div class="mt-3">
                    @foreach (var p in expenseModel.Participants)
                    {
                        <div class="input-group mb-2">
                            <span class="input-group-text" style="width: 150px;">@GetFriendName(p.UserId)</span>
                            <InputNumber @bind-Value="p.Percentage" class="form-control" placeholder="0" />
                            <span class="input-group-text">%</span>
                        </div>
                    }
                </div>
            }

        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                else
                {
                    <span>Save Expense</span>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    private CreateExpenseModel expenseModel = new();
    private List<UserProfile>? friends;
    private string? errorMessage;
    private bool isSubmitting;
    private HttpClient _httpClient;

    private string? _currentUserId;
    private UserProfile? _currentUserProfile; // <-- Add this

    private Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("WebAPI");

        // _currentUserId = await CurrentUserService.GetUserIdAsync();
        _currentUserProfile = await CurrentUserService.GetUserProfileAsync(); // <-- Get profile
        _currentUserId = _currentUserProfile?.Id; // <-- Set user ID from profile

        expenseModel.Date = DateTime.Now;
        expenseModel.Participants = new List<SplitParticipant>();

        if (_currentUserId != null)
        {
            AddParticipant(_currentUserId);
        }

        friends = await _httpClient.GetFromJsonAsync<List<UserProfile>>("api/friends");
    }

    private void AddParticipant(string userId)
    {
        if (!expenseModel.Participants.Any(p => p.UserId == userId))
        {
            expenseModel.Participants.Add(new SplitParticipant(userId, null, null));
        }
    }

    private void RemoveParticipant(SplitParticipant participant)
    {
        expenseModel.Participants.Remove(participant);
    }

    private string GetFriendName(string userId)
    {
        if (userId == _currentUserId)
        {
            return _currentUserProfile != null
                ? $"{_currentUserProfile.FirstName} {_currentUserProfile.LastName} (self)"
                : "You (self)";
        }
        var friend = friends?.FirstOrDefault(f => f.Id == userId);
        return friend != null ? $"{friend.FirstName} {friend.LastName}" : "Unknown";
    }

    private async Task HandleCreateExpense()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            var modelToSend = new CreateExpenseModel
            {
                Description = expenseModel.Description,
                TotalAmount = expenseModel.TotalAmount,
                Date = expenseModel.Date,
                SplitType = expenseModel.SplitType,
                Participants = expenseModel.Participants
            };

            var response = await _httpClient.PostAsJsonAsync("api/expenses", modelToSend);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/"); // Redirect to dashboard
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<object>();
                errorMessage = error?.ToString() ?? "An error occurred.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}